end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country"){
# convert to correct date format
start_date = as.Date(start_date)
end_date = as.Date(end_date)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
if(!(all(selected_area %in% Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
# get baseline data
# applying the filters defined in the function here
df <- df %>%
filter(Pentad %in% selected_pentads) %>%
filter(StartDate >= start_date) %>%
filter(StartDate <= end_date)
# get number of reports in spatial, temporal space defined
n_obs <- df %>%
filter(Spp == species_id) %>%
nrow()
total_obs <- df %>%
nrow()
# reporting rate
rr = n_obs / total_obs
return(df)
}
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country")
reporting_rate <- function(df,
species_id,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country"){
# convert to correct date format
start_date = as.Date(start_date)
end_date = as.Date(end_date)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
# get baseline data
# applying the filters defined in the function here
df <- df %>%
filter(Pentad %in% selected_pentads) %>%
filter(StartDate >= start_date) %>%
filter(StartDate <= end_date)
# get number of reports in spatial, temporal space defined
n_obs <- df %>%
filter(Spp == species_id) %>%
nrow()
total_obs <- df %>%
nrow()
# reporting rate
rr = n_obs / total_obs
return(df)
}
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country")
reporting_rate <- function(df,
species_id,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country"){
# convert to correct date format
start_date = as.Date(start_date)
end_date = as.Date(end_date)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
print(selected_area %in% selected_pentads$Area)
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
# get baseline data
# applying the filters defined in the function here
df <- df %>%
filter(Pentad %in% selected_pentads) %>%
filter(StartDate >= start_date) %>%
filter(StartDate <= end_date)
# get number of reports in spatial, temporal space defined
n_obs <- df %>%
filter(Spp == species_id) %>%
nrow()
total_obs <- df %>%
nrow()
# reporting rate
rr = n_obs / total_obs
return(df)
}
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country")
"kenya" %in% selected_pentads$Area
"Kenya" %in% selected_pentads$Area
source('~/.active-rstudio-document', echo=TRUE)
reporting_rate <- function(df,
species_id,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country"){
# convert to correct date format
start_date = as.Date(start_date)
end_date = as.Date(end_date)
# correct case
selected_area = tolower(selected_area)
selection_type = tolower(selection_type)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
print(selected_area %in% selected_pentads$Area)
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
# get baseline data
# applying the filters defined in the function here
df <- df %>%
filter(Pentad %in% selected_pentads) %>%
filter(StartDate >= start_date) %>%
filter(StartDate <= end_date)
# get number of reports in spatial, temporal space defined
n_obs <- df %>%
filter(Spp == species_id) %>%
nrow()
total_obs <- df %>%
nrow()
# reporting rate
rr = n_obs / total_obs
return(df)
}
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country")
reporting_rate <- function(df,
species_id,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country"){
# convert to correct date format
start_date = as.Date(start_date)
end_date = as.Date(end_date)
# correct case
selected_area = tolower(selected_area)
selection_type = tolower(selection_type)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
# get baseline data
# applying the filters defined in the function here
df <- df %>%
filter(Pentad %in% selected_pentads) %>%
filter(StartDate >= start_date) %>%
filter(StartDate <= end_date)
# get number of reports in spatial, temporal space defined
n_obs <- df %>%
filter(Spp == species_id) %>%
nrow()
total_obs <- df %>%
nrow()
# reporting rate
rr = n_obs / total_obs
return(rr)
}
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Pentad")
reporting_rate <- function(df,
species_id,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country"){
# convert to correct date format
start_date = as.Date(start_date)
end_date = as.Date(end_date)
# correct case
selected_area = tolower(selected_area)
selection_type = tolower(selection_type)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
if(is.null(selected_pentads)){stop("This specific combination of area and type do not exist, check `pentads_geographical_features` for all possible comvbinations")}
# get baseline data
# applying the filters defined in the function here
df <- df %>%
filter(Pentad %in% selected_pentads) %>%
filter(StartDate >= start_date) %>%
filter(StartDate <= end_date)
# get number of reports in spatial, temporal space defined
n_obs <- df %>%
filter(Spp == species_id) %>%
nrow()
total_obs <- df %>%
nrow()
# reporting rate
rr = n_obs / total_obs
return(rr)
}
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Pentad")
reporting_rate <- function(df,
species_id,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country"){
# convert to correct date format
start_date = as.Date(start_date)
end_date = as.Date(end_date)
# correct case
selected_area = tolower(selected_area)
selection_type = tolower(selection_type)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
print(selected_pentads)
if(is.null(selected_pentads)){stop("This specific combination of area and type do not exist, check `pentads_geographical_features` for all possible comvbinations")}
# get baseline data
# applying the filters defined in the function here
df <- df %>%
filter(Pentad %in% selected_pentads) %>%
filter(StartDate >= start_date) %>%
filter(StartDate <= end_date)
# get number of reports in spatial, temporal space defined
n_obs <- df %>%
filter(Spp == species_id) %>%
nrow()
total_obs <- df %>%
nrow()
# reporting rate
rr = n_obs / total_obs
return(rr)
}
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Pentad")
reporting_rate <- function(df,
species_id,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country"){
# convert to correct date format
start_date = as.Date(start_date)
end_date = as.Date(end_date)
# correct case
selected_area = tolower(selected_area)
selection_type = tolower(selection_type)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
print(length(selected_pentads))
if(length(selected_pentads) == 0){stop("This specific combination of area and type do not exist, check `pentads_geographical_features` for all possible comvbinations")}
# get baseline data
# applying the filters defined in the function here
df <- df %>%
filter(Pentad %in% selected_pentads) %>%
filter(StartDate >= start_date) %>%
filter(StartDate <= end_date)
# get number of reports in spatial, temporal space defined
n_obs <- df %>%
filter(Spp == species_id) %>%
nrow()
total_obs <- df %>%
nrow()
# reporting rate
rr = n_obs / total_obs
return(rr)
}
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Pentad")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "0100c3620" ,
selection_type = "Pentad")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Nairobi" ,
selection_type = "County")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Coast" ,
selection_type = "Province")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Coast" ,
selection_type = "Country")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Coast" ,
selection_type = "Province")
library(africabirdmap)
?reporting_rate
?reporting_rate
library(africabirdmap)
library(africabirdmap)
?reporting_rate
?reporting_rate
library(africabirdmap)
?reporting_rate
library(africabirdmap)
?reporting_rate
library(africabirdmap)
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Coast" ,
selection_type = "Province")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Rift Valley" ,
selection_type = "Province")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Nairobi" ,
selection_type = "Province")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Nairobi" ,
selection_type = "County")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Nairobi" ,
selection_type = "Pentad")
View(africabirdmap::pentads_geographical_features)
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "0115_3645" ,
selection_type = "Pentad")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Turkana" ,
selection_type = "County")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Coast" ,
selection_type = "Province")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Turkana" ,
selection_type = "County")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "0115_3645" ,
selection_type = "Pentad")
library(africabirdmap)
