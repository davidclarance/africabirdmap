"Olive Thrush",
"African Dusky Flycatcher",
"White-eyed Slaty Flycatcher",
"Blackcap",
"Willow Warbler",
"Grey-backed Camaroptera",
"Grey Apalis",
"Black-collared Apalis",
"Abyssinian White-eye",
"Montane White-eye",
"African Paradise Flycatcher",
"Chin-spot Batis",
"Black-throated Wattle-eye",
"Black Cuckoo-shrike",
"Grey Cuckoo-shrike",
"Brown-capped Weaver",
"Grey-headed Negrofinch",
"Green-backed Twinspot",
"Yellow-bellied Waxbill",
"Thick-billed Canary (Seedeater)",
"Long-tailed Cormorant",
"Common Squacco Heron",
"Great Egret",
"Grey Heron",
"Hamerkop",
"Black Stork",
"Yellow-billed Stork",
"Sacred Ibis",
"Hadada Ibis",
"White-backed Duck",
"Egyptian Goose",
"African Black Duck",
"Yellow-billed Duck",
"Red-billed Teal",
"Black-shouldered Kite",
"Common Moorhen",
"Red-knobbed Coot",
"Grey Crowned Crane",
"African Jacana",
"Three-banded Plover",
"Green Sandpiper",
"Wood Sandpiper",
"Common Sandpiper",
"Emerald-spotted Wood Dove",
"Laughing Dove",
"Feral (Hybrid) Lovebird",
"Diederik Cuckoo",
"African Palm Swift",
"Eurasian Swift",
"Horus Swift",
"Little Swift",
"Grey-headed Kingfisher",
"Pied Kingfisher",
"Cape Wagtail",
"Lesser Striped Swallow",
"Lesser Swamp Warbler",
"Little Rush Warbler",
"Dark-capped Yellow Warbler",
"Red-faced Cisticola",
"Grey-capped Warbler",
"Common Fiscal",
"Sulphur-breasted Bush-Shrike",
"Rufous Sparrow",
"Grey-headed Sparrow",
"Holub’s Golden Weaver",
"Black-headed Weaver",
"Cardinal Quelea",
"Common Waxbill",
"Red-cheeked Cordon-bleu",
"Yellow-rumped Seedeater",
"Golden-breasted Bunting",
"Marabou Stork",
"Grey Heron",
"Ayres’s Hawk Eagle",
"Montane (Broad-ringed) White-eye",
"Rüppell’s Robin Chat",
"Reed (Long-tailed) Cormorant",
"Spot-flanked Barbet",
"Eastern (Green-backed) Honeybird",
"Crowned Eagle",
"Eurasian Bee-eater",
"Red-faced Crombec",
"Kenya Rufous Sparrow",
"Eurasian Nightjar",
"Common Whitethroat",
"Rüppell's Robin Chat",
"Tree Pipit",
"Little Swift (Indian House Swift)",
"African Harrier-Hawk",
"African Fish-Eagle",
"African Plain Martin",
"Wire-tailed Swallow",
"Spotted Flycatcher",
"Rüppell's Robin-Chat",
"Speke's Weaver",
"Red-tailed Shrike",
"Isabelline Shrike",
"Barn Swallow",
"Red-rumped Swallow",
"Eurasian Blackcap",
"Greater Whitethroat (Common Whitethroat)",
"Chestnut Weaver",
"Cattle Egret",
"Giant Kingfisher",
"Great Cormorant",
"White-browed Sparrow-Weaver",
"Grey Crowned-Crane",
"Ayres's Hawk-Eagle",
"Emerald-spotted Wood-Dove",
"Yellow-crowned Canary",
"White Stork",
"Red-cheeked Cordonbleu",
"Black-winged Kite (Black-shouldered Kite)",
"Grey-olive Greenbul",
"Green Sandpiper",
"Eurasian Marsh-Harrier",
"Northern Pied-Babbler",
"Golden-breasted Bunting",
"Marsh Warbler",
"Striated Heron (Little Heron)",
"Shikra",
"Thick-billed Seedeater",
"Tawny Eagle",
"Greater Honeyguide",
"Rattling Cisticola",
"Long-tailed Fiscal",
"Red-knobbed Coot",
"Rufous-necked Wryneck",
"Abyssinian Nightjar",
"African Yellow White-eye",
"Common Nightingale",
"European Honey-buzzard",
"Red-chested Flufftail",
"Booted Eagle",
"Beautiful Sunbird",
"Western Yellow Wagtail",
"African Green-Pigeon",
"Black-headed Apalis",
"Brown Parisoma",
"Bank Swallow (Sand Martin)",
"Pied Cuckoo (Jacobin Cuckoo)",
"Brimstone Canary",
"Great White Pelican (Rosy Pelican)",
"Spur-winged Goose",
"Rock Pigeon (Blue Rock Pigeon)",
"Village Indigobird",
"Parrot-billed Sparrow",
"African Spoonbill",
"Little Sparrowhawk",
"Golden-winged Sunbird",
"African Firefinch",
"Crimson-rumped Waxbill",
"Moustached Tinkerbird",
"Great Egret",
"Madagascar Pond-Heron",
"African Black-headed Oriole",
"Sedge Warbler",
"Black-crowned Night-Heron",
"Eastern Olivaceous Warbler",
"Grey Cuckooshrike",
"Dusky Turtle-Dove",
"Fulvous Whistling-Duck",
"Peregrine Falcon",
"Harlequin Quail",
"Yellow-bellied Greenbul",
"Grey-headed Nigrita",
"Southern Black-Flycatcher",
"Tullberg's Woodpecker",
"Fork-tailed Drongo")
scientific_names <- comm2sci(common_names[2], db = "eol")
scientific_names
scientific_names <- comm2sci(common_names[2], db = "eol", simplify = TRUE)
scientific_names
scientific_names <- comm2sci(common_names, db = "eol", simplify = TRUE)
scientific_names
View(scientific_names)
as.data.frame(scientific_names)
as.character(scientific_names)
all_names_combined <- c(common_names, as.character(scientific_names))
all_names_combined <- cbind(common_names, as.character(scientific_names))
View(all_names_combined)
str(all_names_combined)
all_names_combined <- bind_cols(common_names, as.character(scientific_names))
all_names_combined <- bind_cols(com = common_names, sci = as.character(scientific_names))
str(all_names_combined)
write_csv(all_names_combined, "all_names_combined.csb")
write_csv(all_names_combined, "all_names_combined.csv")
>comm2sci()
>comm2sci
?comm2sci
# The script is the source of the pentad features data in data/
# The methodology is simple:
#   Find the midpoint of each pentad
#   Check if the midpoint lies in a polygon (defined by county etc)
library(rgdal)
library(rgeos)
library(here)
library(tidyverse)
library(sf)
# get raw -----------------------------------------------------------------
# get pentad list
# this url was provided by Michael Brooks
url <- 'http://api.adu.org.za/sabap2/v2/pentads/country/kenya?format=geoJSON'
downloader::download(url, destfile = "data-raw/kenya-pentads.geojson")
pentad_json <- readOGR(dsn = "data-raw/kenya-pentads.geojson")
# get counties map
# downloaded from
# http://data.openinstitute.com/dataset/kenya-counties/resource/138d827b-167f-4425-947a-9f241e718d08
sf_counties = read_sf('data-raw/kenyan-counties.geojson')
# extract from raw --------------------------------------------------------
# extract pentad data
# 6815 pentads
pentad_table <- map_df(1:dim(pentad_json)[1],
function(x) tibble(Lat = pentad_json@polygons[[x]]@Polygons[[1]]@coords[1:4],
Long = pentad_json@polygons[[x]]@Polygons[[1]]@coords[6:9],
Pentad = as.character(pentad_json@data[["pentad"]][x])) ) %>%
# get mid points of the pentads
group_by(Pentad) %>%
summarize(
MidLat = mean(Lat),
MidLong = mean(Long)
)
# get county labels -------------------------------------------------------
counties_planar <- st_transform(sf_counties, 2163)
county_names_for_pentads <- apply(pentad_table[,2:3], 1, function(x){
# transformation to palnar is required, since sf library assumes planar projection
coords <- as.data.frame(matrix(x, nrow = 1,
dimnames = list("", c("x", "y"))))
pentads_sf <- st_transform(st_sfc(st_point(x),crs = 4326), 2163)
# st_intersects with sparse = FALSE returns a logical matrix
# with rows corresponds to argument 1 (points) and
# columns to argument 2 (polygons)
counties_planar[which(st_intersects(pentads_sf, counties_planar, sparse = FALSE)), ]$COUNTY
} )
pentad_table$CountyNames = as.character(sf_pentads)
pentad_table$CountyNames = as.character(county_names_for_pentads)
View(pentad_table)
glimpse(pentad_table)
table(pentad_table$CountyNames)
glimpse(africabirdmap::pentads_geographical_features)
glimpse(pentad_table)
pentads_geographical_features <- pentad_table %>%
rename("CountyNames" = "County")
source('~/.active-rstudio-document', echo=TRUE)
pentads_geographical_features <- pentad_table %>%
rename("County" = "CountyNames")
glimpse(africabirdmap::pentads_geographical_features)
glimpse(pentad_table)
glimpse(pentads_geographical_features)
pentads_geographical_features <- pentad_table %>%
rename("County" = "CountyNames") %>%
left_join(., county_provinces, by = "County") %>%
all_combinations %>%
mutate(Pentad = as.character(Pentad)) %>%
mutate(County = as.character(County)) %>%
filter(Contains == 1) %>%
left_join(., county_provinces, by = "County") %>%
select(-Contains) %>%
mutate(Country = 'Kenya') %>%
select(Pentad, Country, Province, County)
pentads_geographical_features <- pentad_table %>%
rename("County" = "CountyNames") %>%
left_join(., county_provinces, by = "County") #%>%
county_provinces <- read_csv('data-raw/county_province_list.csv')
pentads_geographical_features <- pentad_table %>%
rename("County" = "CountyNames") %>%
left_join(., county_provinces, by = "County") #%>%
glimpse(pentads_geographical_features)
View(pentads_geographical_features)
glimpse(pentads_geographical_features)
pentads_geographical_features <- pentad_table %>%
rename("County" = "CountyNames") %>%
mutate(County  = if_else(County == "as.character(0)", "Unclassified", County)) %>%
left_join(., county_provinces, by = "County") %>%
mutate()
glimpse(pentads_geographical_features)
View(pentads_geographical_features)
pentads_geographical_features <- pentad_table %>%
rename("County" = "CountyNames") %>%
mutate(County  = if_else(County == "character(0)", "Unclassified", County)) %>%
left_join(., county_provinces, by = "County")
pentads_geographical_features <- pentad_table %>%
rename("County" = "CountyNames") %>%
mutate(County  = if_else(County == "character(0)", "Unclassified", County)) %>%
left_join(., county_provinces, by = "County") %>%
mutate(Country = "Kenya")
# The script is the source of the pentad features data in data/
# The methodology is simple:
#   Find the midpoint of each pentad
#   Check if the midpoint lies in a polygon (defined by county etc)
library(rgdal)
library(rgeos)
library(here)
library(tidyverse)
library(sf)
# get raw -----------------------------------------------------------------
# get pentad list
# this url was provided by Michael Brooks
# run the two lines below only once
# url <- 'http://api.adu.org.za/sabap2/v2/pentads/country/kenya?format=geoJSON'
# downloader::download(url, destfile = "data-raw/kenya-pentads.geojson")
pentad_json <- readOGR(dsn = "data-raw/kenya-pentads.geojson")
# get counties map
# downloaded from
# http://data.openinstitute.com/dataset/kenya-counties/resource/138d827b-167f-4425-947a-9f241e718d08
sf_counties = read_sf('data-raw/kenyan-counties.geojson')
# extract from raw --------------------------------------------------------
# extract pentad data
# 6815 pentads
pentad_table <- map_df(1:dim(pentad_json)[1],
function(x) tibble(Lat = pentad_json@polygons[[x]]@Polygons[[1]]@coords[1:4],
Long = pentad_json@polygons[[x]]@Polygons[[1]]@coords[6:9],
Pentad = as.character(pentad_json@data[["pentad"]][x])) ) %>%
# get mid points of the pentads
group_by(Pentad) %>%
summarize(
MidLat = mean(Lat),
MidLong = mean(Long)
)
# get county labels -------------------------------------------------------
counties_planar <- st_transform(sf_counties, 2163)
county_names_for_pentads <- apply(pentad_table[,2:3], 1, function(x){
# transformation to palnar is required, since sf library assumes planar projection
coords <- as.data.frame(matrix(x, nrow = 1,
dimnames = list("", c("x", "y"))))
pentads_sf <- st_transform(st_sfc(st_point(x),crs = 4326), 2163)
# st_intersects with sparse = FALSE returns a logical matrix
# with rows corresponds to argument 1 (points) and
# columns to argument 2 (polygons)
counties_planar[which(st_intersects(pentads_sf, counties_planar, sparse = FALSE)), ]$COUNTY
} )
pentad_table$CountyNames = as.character(county_names_for_pentads)
# map pentads to features -------------------------------------------------
# join with county-province data
county_provinces <- read_csv('data-raw/county_province_list.csv')
pentads_geographical_features <- pentad_table %>%
rename("County" = "CountyNames") %>%
mutate(County  = if_else(County == "character(0)", "Unclassified", County)) %>%
left_join(., county_provinces, by = "County") %>%
mutate(Country = "Kenya")
save(pentads_geographical_features, file = 'data/pentads_geographical_features.RData')
View(pentads_geographical_features)
table(pentads_geographical_features$County)
library(africabirdmap)
df = extract_data(username = "dclarance@gmail.com",
password = 'greentowel',
user_id = 40664,
species_id = 682)
glimpse(df)
original = underhill_smoother(raw_data = df,
selected_area = "Coast",
selection_type = "Province",
species_id = 682,
pentade_window = 3)
View(original)
underhill_curves(original, species_id = 682, species_name = "African Paradise Flycatcher")
original = underhill_smoother(raw_data = df,
selected_area = "Mombasa",
selection_type = "County",
species_id = 682,
pentade_window = 3)
underhill_curves(original, species_id = 682, species_name = "African Paradise Flycatcher")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Coast" ,
selection_type = "Province")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Kenya" ,
selection_type = "Country")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "Turkana" ,
selection_type = "County")
reporting_rate(df,
species_id = 682,
start_date = '1970-01-01',
end_date = Sys.Date(),
selected_area = "0115_3645" ,
selection_type = "Pentad")
?return
area_filter <- function(selected_area, selection_type){
# correct case
selected_area = tolower(selected_area)
selection_type = tolower(selection_type)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
print(head(selected_pentads))
# check if the selected features exist
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
if(length(selected_pentads) == 0){stop("This specific combination of area and type do not exist, check `pentads_geographical_features` for all possible comvbinations")}
return(selected_pentads)
}
area_filter(selected_area = "Turkana" ,
selection_type = "County")
turkana <- area_filter(selected_area = "Turkana" ,
selection_type = "County")
turkana <- area_filter(selected_area = "Turkana" ,
selection_type = "County")
glimpse(turkana)
table(pentads_geographical_features$County)
turkana <- area_filter(selected_area = "Kenya" ,
selection_type = "Country")
glimpse(turkana)
filter_pentad <- function(selected_area, selection_type){
# correct case
selected_area = tolower(selected_area)
selection_type = tolower(selection_type)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
if(length(selected_pentads) == 0){stop("This specific combination of area and type do not exist, check `pentads_geographical_features` for all possible comvbinations")}
return(selected_pentads)
}
?message
filter_pentad <- function(selected_area, selection_type){
# correct case
selected_area = tolower(selected_area)
selection_type = tolower(selection_type)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
if(length(selected_pentads) == 0){stop("This specific combination of area and type do not exist, check `pentads_geographical_features` for all possible comvbinations")}
message(paste0(length(selected_pentads), "pentads selected for ", selected_area))
return(selected_pentads)
}
turkana <- filter_pentad(selected_area = "Kenya" ,
selection_type = "Country")
d
filter_pentad <- function(selected_area, selection_type){
# correct case
selected_area = tolower(selected_area)
selection_type = tolower(selection_type)
# prepare location features dataset for filtering
# pentads_geographical_features is the master copy
selected_pentads <- pentads_geographical_features %>%
mutate(SelectedPentad = Pentad) %>%
gather(c("Country", "Province", "County", "Pentad"), key = "Category", value = "Area") %>%
mutate(Area = tolower(Area)) %>%
mutate(Category = tolower(Category))
# check if the selected features exist
if(!(all(selected_area %in% selected_pentads$Area))){stop("selected_area not in list, check `pentads_geographical_features` for all possible areas")}
if(!(all(selection_type %in% selected_pentads$Category))){stop("selection_type not in list, possible types are: Pentad, Country, County, Province ")}
# filter by user selection
selected_pentads <- selected_pentads %>%
filter((Area %in% selected_area) & (Category %in% selection_type)) %>%
select(SelectedPentad) %>%
pull()
if(length(selected_pentads) == 0){stop("This specific combination of area and type do not exist, check `pentads_geographical_features` for all possible comvbinations")}
message(paste0(length(selected_pentads), " pentads selected for ", selected_area))
return(selected_pentads)
}
turkana <- filter_pentad(selected_area = "Kenya" ,
selection_type = "Country")
turkana <- filter_pentad(selected_area = "Mombasa" ,
selection_type = "Country")
turkana <- filter_pentad(selected_area = "Nairobi" ,
selection_type = "County")
?filter_pentads
library(africabirdmap)
?filter_pentads
library(africabirdmap)
original = underhill_smoother(raw_data = df,
selected_area = "Mombasa",
selection_type = "County",
species_id = 682,
pentade_window = 3)
original
underhill_curves(original, species_id = 682, species_name = "African Paradise Flycatcher")
library(africabirdmap)
library(africabirdmap)
